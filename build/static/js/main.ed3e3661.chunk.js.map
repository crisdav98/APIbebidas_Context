{"version":3,"sources":["components/Header.js","context/CategoriaContext.js","context/RecetasContext.js","components/Formulario.js","context/ModalContext.js","components/Receta.js","components/ListaRecetas.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","CategoriasContext","createContext","CategoriasProvider","props","useState","categorias","guardarCategorias","useEffect","a","Axios","resultado","data","drinks","consultarAPI","Provider","value","children","RecetasContext","RecetasProvider","recetas","guardarRecetas","nombre","categoria","consulta","guardarConsulta","consultar","validarConsulta","url","axios","get","respuesta","Formulario","busqueda","guardarBusqueda","useContext","obtenerDatosReceta","e","target","name","onSubmit","preventDefault","type","placeholder","onChange","map","strCategory","key","ModalContext","ModalProvider","idReceta","guardarIdReceta","detallesReceta","guardarDetallesReceta","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","Receta","receta","modalStyle","open","setOpen","classes","strDrink","src","strDrinkThumb","alt","onClick","idDrink","Modal","onClose","style","strInstructions","ingredientes","i","push","mostrarCantidades","ListaRecetas","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed3e3661.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"bg-alert\">\r\n      <h1> Recetas</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, {createContext, useState, useEffect} from \"react\";\r\nimport Axios from 'axios';\r\n// crear el Context\r\n\r\nexport const CategoriasContext = createContext();\r\n// Provider es donde se encuentran las funciones y state\r\nconst CategoriasProvider = (props) =>{\r\n    // crear el state del context\r\n    const [categorias, guardarCategorias] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        \r\n        // Método para consumir API\r\n        const consultarAPI = async()=>{\r\n            const url = 'https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list';\r\n            const resultado = await Axios(url);\r\n            guardarCategorias(resultado.data.drinks);\r\n        }\r\n        consultarAPI();\r\n    },[])\r\n    return(\r\n        <CategoriasContext.Provider\r\n            value={{\r\n                categorias\r\n            }}\r\n        >\r\n            {props.children}\r\n        </CategoriasContext.Provider>\r\n    )\r\n}\r\n\r\nexport default CategoriasProvider;\r\n","import React, { createContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nexport const RecetasContext = createContext();\r\n\r\n// crear el provider\r\nconst RecetasProvider = props => {\r\n  // crear context\r\n  const [recetas, guardarRecetas] = useState([]);\r\n  const [consulta, guardarConsulta] = useState({\r\n    nombre: \"\",\r\n    categoria: \"\"\r\n  });\r\n  const [consultar, validarConsulta] = useState(false);\r\n\r\n  const { nombre, categoria } = consulta;\r\n\r\n  useEffect(() => {\r\n    if (consultar) {\r\n      const consultarAPI = async () => {\r\n        const url = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${nombre}&c=${categoria}`;\r\n        const respuesta = await axios.get(url);\r\n        guardarRecetas(respuesta.data.drinks);\r\n      }\r\n      consultarAPI();\r\n    }\r\n  }, [consulta,nombre,categoria,consultar]);\r\n\r\n  return (\r\n    <RecetasContext.Provider value={{ recetas, guardarConsulta,validarConsulta }}>\r\n      {props.children}\r\n    </RecetasContext.Provider>\r\n  );\r\n};\r\n\r\nexport default RecetasProvider;\r\n","import React, { useState, useContext } from 'react';\r\nimport {CategoriasContext} from '../context/CategoriaContext';\r\nimport {RecetasContext} from '../context/RecetasContext';\r\n\r\nconst Formulario = () => {\r\n    const [busqueda, guardarBusqueda] = useState({\r\n        nombre: '',\r\n        categoria:''\r\n    });\r\n\r\n    const {categorias} = useContext(CategoriasContext);\r\n    const {guardarConsulta,validarConsulta} = useContext(RecetasContext);\r\n\r\n    // Función para leer los contenidos\r\n    const obtenerDatosReceta = e =>{\r\n        guardarBusqueda({\r\n            ...busqueda,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    // Enviar Datos a RecetasContext\r\n    const enviarDatosReceta = e =>{\r\n        e.preventDefault();\r\n        \r\n        validarConsulta(true);\r\n        guardarConsulta(busqueda);\r\n        \r\n    }\r\n    return (\r\n        <form className=\"col-12\" onSubmit={enviarDatosReceta}>\r\n            <fieldset className=\"text-center\">\r\n                <legend>Busca bebidas por Categoría o Ingrediente</legend>\r\n            </fieldset>\r\n\r\n            <div className=\"row mt-4\">\r\n                <div className=\"col-md-4\">\r\n                    <input \r\n                        name=\"nombre\"\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        placeholder=\"Buscar Ingrediente\"\r\n                        onChange={obtenerDatosReceta}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <select \r\n                        className=\"form-control\"\r\n                        name=\"categoria\"\r\n                        onChange={obtenerDatosReceta}\r\n                    >\r\n                        <option value=\"\">-Selecciona Categoría-</option>\r\n                        {categorias.map(categoria =>(\r\n                            <option value={categoria.strCategory} key= {categoria.strCategory}>{categoria.strCategory}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <input \r\n                    type=\"submit\"\r\n                    className=\"btn btn-block btn-primary\"\r\n                    value=\"Buscar Bebidas\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Formulario;","import React,{createContext,useState,useEffect} from 'react';\r\nimport Axios from 'axios';\r\n\r\n// crear el context \r\nexport const ModalContext = createContext();\r\n\r\nconst ModalProvider = (props) => {\r\n    //State del provider\r\n    const [idReceta, guardarIdReceta] = useState(null);\r\n    const [detallesReceta, guardarDetallesReceta] = useState({})\r\n\r\n    useEffect(()=>{\r\n        const consultarAPI = async()=>{\r\n            if(idReceta === null)return;\r\n            const url = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${idReceta}`;\r\n            const respuesta = await Axios(url);\r\n            guardarDetallesReceta(respuesta.data.drinks[0]);\r\n        }\r\n        consultarAPI();\r\n    },[idReceta]);\r\n    return (\r\n        <ModalContext.Provider\r\n            value={{guardarIdReceta,detallesReceta,guardarDetallesReceta}}\r\n        >\r\n            {props.children}\r\n        </ModalContext.Provider>\r\n    );\r\n};\r\n\r\nexport default ModalProvider;","import React, {useContext, useState} from 'react';\r\nimport {ModalContext} from \"../context/ModalContext\";\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 ;\r\n    const left = 50;\r\n  \r\n    return {\r\n      top: `${top}%`,\r\n      left: `${left}%`,\r\n      transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n      position: 'absolute',\r\n      width: 450,\r\n      backgroundColor: theme.palette.background.paper,\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\n\r\nconst Receta = ({receta}) => {\r\n    //Configuración del modal de material-ui\r\n    const [modalStyle] = useState(getModalStyle);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleOpen = ()=>{\r\n        setOpen(true);\r\n    }\r\n    const handleClose = () =>{\r\n        setOpen(false);\r\n    }\r\n\r\n    //extraer valores del context\r\n    const {guardarIdReceta,detallesReceta,guardarDetallesReceta} = useContext(ModalContext);\r\n    // Guardar el id y enviarlo a modalContext\r\n    const recogerId = () =>{\r\n        guardarIdReceta(receta.idDrink);\r\n        handleOpen();\r\n    }\r\n\r\n    // Función para mostrar cantidades e ingredientes\r\n    const mostrarCantidades = detallesReceta => {\r\n        let ingredientes = [];\r\n        for(let i =1; i<16; i++){\r\n            if(detallesReceta[`strIngredient${i}`]){\r\n                ingredientes.push(\r\n                <li>{detallesReceta[`strIngredient${i}`]} \r\n                    {detallesReceta[`strMeasure${i}`]}</li>\r\n                )\r\n            }\r\n        }\r\n        return ingredientes;\r\n    }\r\n    return (\r\n        <div className=\"col-md-4 mb-3\">\r\n            <div className=\"card\">\r\n                <h2 className=\"card-header\">{receta.strDrink}</h2>\r\n            \r\n                <img className=\"card-img-top\" src={receta.strDrinkThumb} alt={`Imagen de ${receta.strDrink}`} />\r\n                <div className=\"card-body\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-block btn-primary\"\r\n                        onClick={recogerId}\r\n                    >\r\n                        Ver Receta\r\n                    </button>\r\n\r\n                    <Modal\r\n                        open= {open}\r\n                        onClose={()=>{\r\n                            guardarIdReceta(null);\r\n                            guardarDetallesReceta({});\r\n                            handleClose();\r\n                        }}\r\n                    >\r\n                        <div style={modalStyle} className={classes.paper}>\r\n                            <h2>{detallesReceta.strDrink}</h2>\r\n                            <h3 className=\"mt-4\">Instrucciones</h3>\r\n                            <p>\r\n                                {detallesReceta.strInstructions}\r\n                            </p>\r\n                            <img className=\"img-fluid my-4\" src={detallesReceta.strDrinkThumb}/>\r\n\r\n                            <h3> Ingredientes y cantidades</h3>\r\n                            <ul>\r\n                                {mostrarCantidades(detallesReceta)}\r\n                            </ul>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Receta;","import React, { useContext } from 'react';\r\nimport {RecetasContext} from \"../context/RecetasContext\";\r\nimport Receta from \"./Receta\";\r\n\r\n\r\nconst ListaRecetas = () => {\r\n\r\n    const {recetas} = useContext(RecetasContext);\r\n    return (\r\n        <div className=\"row mt-5\">\r\n            {recetas.map(receta=>(\r\n                <Receta key={receta.idDrink} receta={receta} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListaRecetas;","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Formulario from \"./components/Formulario\";\nimport CategoriasProvider from \"./context/CategoriaContext\";\nimport RecetasProvider from \"./context/RecetasContext\";\nimport ListaRecetas from \"./components/ListaRecetas\";\nimport ModalProvider from \"./context/ModalContext\";\n\nfunction App() {\n  return (\n    <CategoriasProvider>\n      <RecetasProvider>\n        <ModalProvider>\n          <Header />\n          <div className=\"container mt-5\">\n            <div className=\"row\">\n              <Formulario />\n            </div>\n            <ListaRecetas />\n          </div>\n        </ModalProvider>\n      </RecetasProvider>\n    </CategoriasProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}